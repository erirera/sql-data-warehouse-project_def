/*
==========================================
Create database and schemas
==========================================
Script Purpose:
This script creates a new database named ‘DataWarehous’ after checking if it already exists. If the database exists, it is dropped and recreated. Additionally, the script sets up three schemas within the databse: ‘bronze’, ‘silver’, and ‘gold’.

Warning:
Running this script will drop the entire ‘DataWarehouse’ database if it exists. All data in the database will be permanently deleted. Proceed with caution and ensure you have proper backups before running this script.
*/

-- Database: DataWarehouse
-- DROP DATABASE IF EXISTS "DataWarehouse";

CREATE DATABASE "DataWarehouse"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United States.1252'
    LC_CTYPE = 'English_United States.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

-- SCHEMA: bronze
-- DROP SCHEMA IF EXISTS bronze ;
CREATE SCHEMA IF NOT EXISTS bronze
    AUTHORIZATION postgres;

-- SCHEMA: silver
-- DROP SCHEMA IF EXISTS silver ;
CREATE SCHEMA IF NOT EXISTS silver
    AUTHORIZATION postgres;

-- SCHEMA: gold
-- DROP SCHEMA IF EXISTS gold ;
CREATE SCHEMA IF NOT EXISTS gold
    AUTHORIZATION postgres;

-- Table: bronze.crm_cust_info

DROP TABLE IF EXISTS bronze.crm_cust_info;
CREATE TABLE IF NOT EXISTS bronze.crm_cust_info
(
    cst_id integer,
    cst_key character varying(50) COLLATE pg_catalog."default",
    cst_firstname character varying(50) COLLATE pg_catalog."default",
    cst_lastname character varying(50) COLLATE pg_catalog."default",
    cst_marital_status character(1) COLLATE pg_catalog."default",
    cst_gndr character(1) COLLATE pg_catalog."default",
    cst_create_date date,
    CONSTRAINT crm_cust_info_cst_marital_status_check CHECK (cst_marital_status = ANY (ARRAY['S'::bpchar, 'M'::bpchar])),
    CONSTRAINT crm_cust_info_cst_gndr_check CHECK (cst_gndr = ANY (ARRAY['M'::bpchar, 'F'::bpchar]))
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.crm_cust_info
    OWNER to postgres;

-- Table: bronze.crm_prd_info

-- DROP TABLE IF EXISTS bronze.crm_prd_info;
CREATE TABLE IF NOT EXISTS bronze.crm_prd_info
(
    prd_id integer,
    prd_key character varying(30) COLLATE pg_catalog."default",
    prd_nm character varying(100) COLLATE pg_catalog."default",
    prd_cost numeric(10,2),
    prd_line character(1) COLLATE pg_catalog."default",
    prd_start_dt date,
    prd_end_dt date,
    CONSTRAINT crm_prd_info_prd_line_check CHECK (prd_line = ANY (ARRAY['R'::bpchar, 'S'::bpchar]))
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.crm_prd_info
    OWNER to postgres;

-- Table: bronze.crm_sales_details

-- DROP TABLE IF EXISTS bronze.crm_sales_details;
CREATE TABLE IF NOT EXISTS bronze.crm_sales_details
(
    sls_ord_num character varying(20) COLLATE pg_catalog."default",
    sls_prd_key character varying(30) COLLATE pg_catalog."default",
    sls_cust_id integer,
    sls_order_dt date,
    sls_ship_dt date,
    sls_due_dt date,
    sls_sales numeric(10,2),
    sls_quantity integer,
    sls_price numeric(10,2)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.crm_sales_details
    OWNER to postgres;

-- Table: bronze.erp_cust_az12

-- DROP TABLE IF EXISTS bronze.erp_cust_az12;
CREATE TABLE IF NOT EXISTS bronze.erp_cust_az12
(
    cid character varying(20) COLLATE pg_catalog."default",
    bdate date,
    gen character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT erp_cust_az12_gen_check CHECK (gen::text = ANY (ARRAY['Male'::character varying, 'Female'::character varying]::text[]))
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.erp_cust_az12
    OWNER to postgres;

-- Table: bronze.erp_loc_a101

-- DROP TABLE IF EXISTS bronze.erp_loc_a101;
CREATE TABLE IF NOT EXISTS bronze.erp_loc_a101
(
    cid character varying(20) COLLATE pg_catalog."default",
    cntry character varying(50) COLLATE pg_catalog."default"
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.erp_loc_a101
    OWNER to postgres;

-- Table: bronze.erp_px_cat_g1v2

-- DROP TABLE IF EXISTS bronze.erp_px_cat_g1v2;
CREATE TABLE IF NOT EXISTS bronze.erp_px_cat_g1v2
(
    id character varying(10) COLLATE pg_catalog."default",
    cat character varying(50) COLLATE pg_catalog."default",
    subcat character varying(100) COLLATE pg_catalog."default",
    maintenance text
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS bronze.erp_px_cat_g1v2
    OWNER to postgres;

--Initialize bronze_schema
CREATE OR REPLACE PROCEDURE initialize_bronze_schema()
LANGUAGE plpgsql
AS $$
BEGIN
    -- Customer Info
    DROP TABLE IF EXISTS bronze.crm_cust_info;
    CREATE TABLE IF NOT EXISTS bronze.crm_cust_info (
        cst_id INTEGER,
        cst_key VARCHAR(50),
        cst_firstname VARCHAR(50),
        cst_lastname VARCHAR(50),
        cst_marital_status CHAR(1),
        cst_gndr CHAR(1),
        cst_create_date DATE
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.crm_cust_info OWNER TO postgres;

    -- Product Info
    DROP TABLE IF EXISTS bronze.crm_prd_info;
    CREATE TABLE IF NOT EXISTS bronze.crm_prd_info (
        prd_id INTEGER,
        prd_key VARCHAR(30),
        prd_nm VARCHAR(100),
        prd_cost NUMERIC(10,2),
        prd_line CHAR(1),
        prd_start_dt DATE,
        prd_end_dt DATE
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.crm_prd_info OWNER TO postgres;

    -- Sales Details
    DROP TABLE IF EXISTS bronze.crm_sales_details;
    CREATE TABLE IF NOT EXISTS bronze.crm_sales_details (
        sls_ord_num VARCHAR(20),
        sls_prd_key VARCHAR(30),
        sls_cust_id INTEGER,
        sls_order_dt TEXT,
        sls_ship_dt DATE,
        sls_due_dt DATE,
        sls_sales NUMERIC(10,2),
        sls_quantity INTEGER,
        sls_price NUMERIC(10,2)
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.crm_sales_details OWNER TO postgres;

    -- ERP Customer Demographics
    DROP TABLE IF EXISTS bronze.erp_cust_az12;
    CREATE TABLE IF NOT EXISTS bronze.erp_cust_az12 (
        cid VARCHAR(20),
        bdate DATE,
        gen VARCHAR(10)
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.erp_cust_az12 OWNER TO postgres;

    -- ERP Location
    DROP TABLE IF EXISTS bronze.erp_loc_a101;
    CREATE TABLE IF NOT EXISTS bronze.erp_loc_a101 (
        cid VARCHAR(20),
        cntry VARCHAR(50)
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.erp_loc_a101 OWNER TO postgres;

    -- ERP Product Category
    DROP TABLE IF EXISTS bronze.erp_px_cat_g1v2;
    CREATE TABLE IF NOT EXISTS bronze.erp_px_cat_g1v2 (
        id VARCHAR(10),
        cat VARCHAR(50),
        subcat VARCHAR(100),
        maintenance TEXT
    ) TABLESPACE pg_default;
    ALTER TABLE IF EXISTS bronze.erp_px_cat_g1v2 OWNER TO postgres;
END;
$$;
--To Execute 
CALL initialize_bronze_schema();

-- Load bronze data
CREATE OR REPLACE PROCEDURE load_bronze_data()
LANGUAGE plpgsql
AS $$
BEGIN
    -- Load customer info
    COPY bronze.crm_cust_info(cst_id, cst_key, cst_firstname, cst_lastname, cst_marital_status, cst_gndr, cst_create_date)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~1/CUST_I~1.CSV'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''');

    -- Load product info
    COPY bronze.crm_prd_info(prd_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~1/prd_info.csv'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''');

    -- Load ERP customer demographics
    COPY bronze.erp_cust_az12(cid, bdate, gen)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~2/CUST_A~1.CSV'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''', ON_ERROR ignore, LOG_VERBOSITY default);

    -- Load ERP product categories
    COPY bronze.erp_px_cat_g1v2(id, cat, subcat, maintenance)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~2/PX_CAT~1.CSV'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''', ON_ERROR ignore, LOG_VERBOSITY default);

    -- Load CRM sales details
    COPY bronze.crm_sales_details(sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt, sls_ship_dt, sls_due_dt, sls_sales, sls_quantity, sls_price)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~1/SALES_~1.CSV'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''');

    -- Load ERP location data
    COPY bronze.erp_loc_a101(cid, cntry)
    FROM 'C:/meq/Personal/PERSON~1/DATASC~1/BUILDI~1/SQL-DA~1/datasets/SOURCE~2/loc_a101.csv'
    WITH (FORMAT csv, DELIMITER ',', HEADER, ENCODING 'UTF8', QUOTE '"', ESCAPE '''', ON_ERROR ignore, LOG_VERBOSITY default);
END;
$$;
--To Execute 
CALL load_bronze_data();
